<cfcomponent displayname="MD5 then bcrypt (for transitioning legacy MD5 systems)" hint="I take the MD5 of a password and run it through the bcrypt function" extends="farcry.core.packages.security.PasswordHash"
			alias="md5thenbcrypt" seq="9998">

	<cffunction name="isAvailable" hint="Is the hashing agorithm available in this environment?" access="public" returntype="boolean">
		<cfreturn application.security.cryptlib.isHashAlgorithmSupported("bcrypt") />
	</cffunction>

	<cffunction name="matchesHashFormat" hint="Does the string match the format for this hash?" access="public" returntype="boolean">
		<cfargument name="input" type="string" hint="String that may be a password hash" required="true" />
		
		<cfreturn REFind("^\$md5\+2a\$\d+\$[\./A-Za-z0-9]+$",arguments.input) />
	</cffunction>

	<cffunction name="encode" hint="Convert a clear password to its encoded value" access="public" returntype="string">
		<cfargument name="password" type="string" hint="Input password" required="true" />
		
		<cfreturn bcryptOverMD5(Hash(arguments.password,"MD5")) />
	</cffunction>

	<cffunction name="bcryptOverMD5" hint="Apply bcrypt over the MD5 hash of a password" access="public" returntype="string">
		<cfargument name="md5password" type="string" hint="MD5 hash of the input password" required="true" />
		
		<cfset var oBcrypt = application.security.cryptlib.getHashComponent("bcrypt") />
		<cfset var hashedPassword = oBcrypt.encode(arguments.md5password) />
		
		<cfreturn ReplaceNoCase(hashedPassword,"$2a$","$md5+2a$") />
	</cffunction>

	<cffunction name="passwordMatch" hint="Compare a plain password against an encoded string" access="public" returntype="boolean">
		<cfargument name="password" type="string" hint="Input password" required="true" />
		<cfargument name="hashedPassword" type="string" hint="Previously encoded password string" required="true" />
		<cfargument name="bCheckHashStrength" type="string" default="false" hint="If true, the hash strength of the hashed password must also match those generated by encode()" />
		
		<cfset var oBcrypt = application.security.cryptlib.getHashComponent("bcrypt") />
		<cfset var bcryptHash = ReplaceNoCase(arguments.hashedPassword,"$md5+2a$","$2a$") />
		<cfset var md5password = Hash(arguments.password,"MD5") />
		
		<cfreturn oBcrypt.passwordMatch(password=md5password,hashedPassword=bcryptHash,bCheckHashStrength=arguments.bCheckHashStrength) />
	</cffunction>

</cfcomponent>