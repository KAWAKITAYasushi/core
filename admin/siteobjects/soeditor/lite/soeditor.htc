<!--- Copyright (c) 2002 SiteObjects, Inc. --->

<!---

  SourceSafe: $Header: /cvs/farcry/farcry_core/admin/siteobjects/soeditor/lite/soeditor.htc,v 1.3 2003/03/05 00:46:51 brendan Exp $
  Date Created: 9/5/2002
  Author: James Alexander
  Project: soEditor Lite 2.5 
  Description: HTML Component for soEditor

--->

<public:component lightweight="true">
  <!-- Common properties -->
  <public:property name="BaseBGColor" value=""/>  
  <public:property name="BaseFont" value=""/> 
  <public:property name="BaseFontColor" value=""/> 
  <public:property name="BaseFontSize" value=""/>
  <public:property name="BaseURL" value=""/>
  <public:property name="DocumentHTML" put="setHTML" get="getHTML"/>
  <public:property name="Field"/>
  <public:property name="Form"/>
  <public:property name="Height" value="250px"/>
  <public:property name="InitialFocus" value="false"/>
  <public:property name="PageEdit" value="true"/>
  <public:property name="Platform" value="" />
  <public:property name="ScriptPath"/>
  <public:property name="SingleSpaced" value="false"/>
  <public:property name="SourceEdit" put="setSourceEdit" get="getSourceEdit"/> 
  <public:property name="ValidateOnSave" value="false"/> 
  <public:property name="ValidationMessage" value=""/> 
  <public:property name="Width" value="450px"/>  
  <public:property name="WordCount" value="true"/>
  <!-- Common methods -->
  <public:method name="blockFormat"/>
  <public:method name="checkSpelling"/>
  <public:method name="colorPicker"/>
  <public:method name="execCmd"/>            
  <public:method name="image"/> 
  <public:method name="insertImage"/>
  <public:method name="insertLink"/>
  <public:method name="insertTable"/> 
  <public:method name="insertText"/>
  <public:method name="newDocument"/>
  <public:method name="openHelp"/>
  <public:method name="saveDoc"/>
  <public:method name="tdProperties"/>
  <public:method name="toggleBorders"/>
  <public:method name="toggleDetails"/>
  <public:method name="updateFormField"/>
  <public:method name="validate"/>
  <public:attach event="oncontentready" onevent="init()"/>
</public:component>

<script language= "JScript">
// Common vars
var tbControls;
var bSourceEdit = false;
var sDocumentHTML;
var winIM, iWordTimer;
var eventCount = 0;
var bFocusSent = false;

// Common functions
function getParentTag(elName) {
  var currEl;
  var range = element.editor.DOM.selection.createRange();
  if (element.editor.DOM.selection.type == "None" || element.editor.DOM.selection.type == "Text") {
    currEl = range.parentElement();
  } else {
    currEl = range.item(0).parentElement;  
  }
  while (currEl && currEl.tagName.toLowerCase() != "body") {
    if (currEl.tagName.toLowerCase() == elName) {
      return currEl;
    }
    currEl = currEl.parentElement;
  }  
  return null;
}

function insertImage(sTag) {
  var oSelection = element.editor.DOM.selection;
  oTR = oSelection.createRange();
  if (oSelection.type == "Control"){
    oTR.item(0).outerHTML = sTag;
  } else {
    oTR.pasteHTML(sTag);
  }
}

function blockFormat(sTag) {
  if (sTag == "none") {
    // clear the formatting
    execCmd(5043, false, "Normal");
  } else {
    insertText("<" + sTag + ">","</" + sTag + ">", true, false);
  }
  element.editor.focus();      
}

function insertText(sStart, sEnd, asHTML, bAllowEmpty) {  
  var oSelection = element.editor.DOM.selection;
  if (!bAllowEmpty && oSelection.type == "None") return;
  oTR = oSelection.createRange();
  if (oSelection.type == "Control"){
    var elHTML = oTR.item(0).outerHTML;
    oTR.item(0).outerHTML = sStart + elHTML + sEnd;
  }else {
    if (asHTML) {
      if (oSelection.type == "None") {
        oTR.pasteHTML(sStart + sEnd);
      } else {
        oTR.pasteHTML(sStart + oTR.htmlText + sEnd);
      }
    }
    else {
      oTR.text = sStart + oTR.text + sEnd;
    }
  }
  oTR.collapse();
  oTR.select();
}

function execCmd(cmd,pmt,opt) {  
  try {
    element.editor.ExecCommand(cmd,pmt,opt);
    element.editor.focus();
  }catch(e){}
}

function newDocument() {  
  element.editor.NewDocument();
  element.DocumentHTML = "";
}

function validate(sMsg) {
  if (element.editor.DOM.body.outerText.length == 0 && element.editor.DOM.body.getElementsByTagName("img").length == 0 && element.editor.DOM.body.getElementsByTagName("table").length == 0) {
    if (sMsg.length) {
      alert(sMsg);
    } else {
      alert("Please enter some content inside soEditor");
    }
    return false;
  } else {
    return true;
  }
}

function saveDoc() {
  if (element.ValidateOnSave) {
    if (element.editor.DOM.body.outerText.length == 0 && element.editor.DOM.body.getElementsByTagName("img").length == 0 && element.editor.DOM.body.getElementsByTagName("table").length == 0) {
      alert(element.ValidationMessage);
      return false;
    }
  }
  updateFormField();
  element.form.submit();
}

function toggleBorders () {
  element.editor.ShowBorders = !element.editor.ShowBorders;
  element.editor.focus();  
}

function colorPicker(cmd){
  sOut = null;
  sOut = parent.showModalDialog(element.ScriptPath + "colorpalette.htm",null,"dialogWidth:183px;dialogHeight:227px;help:0;status:no;");  
  element.editor.ExecCommand(cmd,0, sOut);  
  element.editor.focus();  
}

function checkSpelling(){
  if (element.editor.DOM.body.innerText.length != 0) {
    updateFormField();
        var _proxy;
      switch(element.Platform) {
        case "CF":
          _proxy = "sproxy.cfm";
          break;
        case "ASP":
          _proxy = "sproxy.asp";
          break;
        case ".NET":
          _proxy = "sproxy.aspx";
          break;
      }
      window.doSpell("en", element.Form + "." + element.Field , element.BaseURL + element.ScriptPath + _proxy + "?Field=" + element.Field, true);
  } else
    alert("Nothing to spell check!");
}

function getHyperLink(currEl) {
  while (currEl.tagName != "BODY") {
    if (currEl.tagName == "A") {
      return currEl;
    }
    currEl = currEl.parentElement;
  }
  return null;    
}

// Open the table dialog box and insert table into the document
function insertTable() {
  var oTableInfo = eval("window.document.all.oTable" + element.Field);
  var aOut = null, oTable = null, aIn = new Array();
  if(element.editor.DOM.selection.type == "Control"){
     var oTable = element.editor.DOM.selection.createRange().item(0);
     if (oTable.tagName == "TABLE") {
      //Set edit table params
      aIn["edit"] = 1;
      aIn["rows"] = oTable.rows.length;
      aIn["columns"] = Math.round(oTable.cells.length/oTable.rows.length);
      aIn["padding"] = oTable.cellPadding;
      aIn["spacing"] = oTable.cellSpacing;
      aIn["width"] = oTable.width;
      aIn["height"] =oTable.height;      
      aIn["border"] =oTable.border;
      aIn["bgcolor"] =oTable.bgColor;
      aIn["style"] = oTable.style.cssText;
      aIn["align"] = oTable.align;
     } 
     else
      return;
  } 
  else { // defaults for new table
    aIn["edit"] = 0;
    aIn["rows"] = 3;
    aIn["columns"] = 3;
    aIn["padding"] = 1;
    aIn["spacing"] = 1;    
    aIn["width"] = "75%";
    aIn["height"] = "";    
    aIn["border"] = 1;
    aIn["bgcolor"] = "";
    aIn["style"] = "";     
  }
  aOut = parent.showModalDialog(element.ScriptPath + "table.htm",aIn,"dialogWidth:325px; dialogHeight:290px;help:0;status:no;");
  if (aOut != null) {  
    if (oTable != null){
      oTable.cellPadding = aOut["padding"];
      oTable.cellSpacing = aOut["spacing"];    
      oTable.width = aOut["width"];      
      oTable.height = aOut["height"];     
      oTable.border = aOut["border"];     
      oTable.bgColor = aOut["bgcolor"];           
      oTable.style.cssText = aOut["style"];
      oTable.align = aOut["align"]; 
    }
    else {
      // Create the table
      oTableInfo.NumRows = aOut["rows"];
      oTableInfo.NumCols = aOut["columns"];
      oTableInfo.TableAttrs = (aOut["align"].length > 0 ? "align=" + aOut["align"] : "") + " border=" + aOut["border"] + " cellPadding=" + aOut["padding"] + " cellSpacing=" + aOut["spacing"] + " width=" + aOut["width"] + " style=" + aOut["style"]+ " height=" + aOut["height"] + " bgcolor=" + aOut["bgcolor"];
      element.editor.ExecCommand(5022,0, oTableInfo);  
    }
  }
  element.editor.focus();  
}  

function tdProperties() {
  var elTD = getParentTag("td");
  if (elTD) {
    var aOut = null, aIn = new Array();
    //Set edit params
    aIn["edit"] = 1;
    aIn["width"] = elTD.width;
    aIn["height"] = elTD.height;
    aIn["align"] = elTD.align;
    aIn["valign"] = elTD.vAlign;
    aIn["nowrap"] = elTD.noWrap;
    aIn["bgcolor"] = elTD.bgColor;
    aIn["bordercolor"] = elTD.borderColor;    
    aIn["style"] = elTD.style.cssText;    
    aOut = parent.showModalDialog(element.ScriptPath + "td.htm",aIn,"dialogWidth:350px; dialogHeight:290px;help:0;status:no;");
    if (aOut){
      elTD.width = aOut["width"];
      elTD.height = aOut["height"];
      elTD.align = aOut["align"];
      elTD.vAlign = aOut["valign"];
      elTD.noWrap = aOut["nowrap"];
      elTD.bgColor = aOut["bgcolor"];
      elTD.borderColor = aOut["bordercolor"];            
      elTD.style.cssText = aOut["style"];       
    }
    element.editor.focus();
  }
}

function getHTML() {
  if (element.PageEdit) {
    // update the hidden form field with entire HTML
    if (bSourceEdit) {
      if (element.editor.DOM.body.innerText.length != 0)
        html = element.editor.FilterSourceCode(element.editor.DOM.body.innerText); 
      else
        html = "";    
    }
    else
      html = element.editor.FilterSourceCode(element.editor.DocumentHTML);
  } else if (element.editor.DOM.body.innerHTML.length != 0) {
    if (bSourceEdit) {
      if (element.editor.DOM.body.innerText.length != 0)
        html = element.editor.FilterSourceCode(element.editor.DOM.body.innerText);
      else
        html = "";
    } else
      html = element.editor.FilterSourceCode(element.editor.DOM.body.innerHTML);
    // check for default empty document and clear it if it exists
  } else {
    html = "";
  }
  return html;
}

function setHTML(sVal) {
  if (element.PageEdit) {
    if (bSourceEdit) {
      this.editor.DOM.body.style.fontFamily="Courier New";
      this.editor.DOM.body.style.fontSize="10pt";       
      element.editor.DOM.body.innerText = sVal; 
    } else{
      element.editor.DocumentHTML = sVal;    
    }
  } else {
    // strip potential HTML, HEAD and BODY elements         
  	sVal = execRE("<[\/]*html[^>]*>","",sVal);                      
  	sVal = execRE("<head[^>]*>(.|\n)*<\/head[^>]*>","",sVal);    
  	sVal = execRE("<[\/]*body[^>]*>","",sVal);                                     
    if (bSourceEdit) {
      this.editor.DOM.body.style.fontFamily="Courier New";
      this.editor.DOM.body.style.fontSize="10pt";       
      this.editor.DOM.body.style.backgroundColor = "#ffffff";
      element.editor.DOM.body.innerText = sVal; 
    } else {
        element.editor.DocumentHTML = "<html><head></head><body>" + sVal + "</body></html>"; 
    }
  }
}

function getSourceEdit() {
  return bSourceEdit;
}

function setSourceEdit(bVal) {
  var sDocHTML = element.DocumentHTML;
  bSourceEdit= bVal;            
  element.DocumentHTML = sDocHTML;
   // set toolbar states
   for (var idxTB = 0; idxTB<2; idxTB++) {
     for (var idxBtn = 0; idxBtn<tbControls[idxTB].length; idxBtn++) {     
       try{tbControls[idxTB][idxBtn].el.isActive = !bVal;}
       catch(e){}
     }   
   }   
   for (var idxSel = 0; idxSel<tbControls[2].length; idxSel++) {     
     try {tbControls[2][idxSel].el.disabled = bVal;}
     catch(e){}
   }
  if (bSourceEdit) {
    window.clearInterval(iWordTimer);
    eval("totalwords" + element.Field + ".innerText = \"Source Edit\"");  
  } else if(WordCount) {
    iWordTimer = window.setInterval(totalWords, 1000, "JScript");    
  }
  element.editor.focus();    
}

function execRE(re,rp,content) {
		oReg=new RegExp(re,"ig");
		r = content.replace(oReg, rp);
		return r; 
}

// updates the hidden form field that contains the html being edited
function updateFormField() {
  var elHidden = eval("element.form." + element.Field);
  var html = "";
  // update the hidden form field
  elHidden.value = element.DocumentHTML;
}

function toggleDetails() {
  element.editor.ShowDetails = !element.editor.ShowDetails;
  element.editor.focus();    
}

function moveCursorFront() {
  // move cursor to beginning of document
  rng = element.editor.DOM.body.createTextRange();
  rng.move("character",0); 
  rng.select();
}

function contentChanged() {
  if (bSourceEdit) {
    for (var idx= 0; idx<tbControls[0].length; idx++) {
      try { cmdStatus = element.editor.QueryStatus(tbControls[0][idx].cmd); } catch(e) { }
      if (!tbControls[0][idx].inText || cmdStatus == 1 || cmdStatus == 0) {
          tbControls[0][idx].el.isActive = false;   
      } else if ((cmdStatus == 3  || cmdStatus == 11) && tbControls[0][idx].inText) {
        if (!tbControls[0][idx].el.isActive)
          tbControls[0][idx].el.isActive = true;   
        if (tbControls[0][idx].el.isPressed){
          tbControls[0][idx].el.isPressed = false;
        }
      }
    }    
  } else {
    for (var idx= 0; idx<tbControls[0].length; idx++) {
      if (tbControls[0][idx].cmd)
        try { cmdStatus = element.editor.QueryStatus(tbControls[0][idx].cmd); } catch (e) { } 
      if (cmdStatus == 1 || cmdStatus == 0) {
        tbControls[0][idx].el.isActive = false;  
      } else if ((cmdStatus == 3  || cmdStatus == 11)) {
        if (!tbControls[0][idx].el.isActive)
          tbControls[0][idx].el.isActive = true;   
        if (tbControls[0][idx].el.isPressed){
          tbControls[0][idx].el.isPressed = false;
        }
      } else if (cmdStatus == 7) {
        if (!tbControls[0][idx].el.isActive)
          tbControls[0][idx].el.isActive = true;   
        tbControls[0][idx].el.isPressed = true;
      }
    }
   if (tbControls[2].length)
    maintainSelects();    
  }
}

function maintainSelects() {
  // hardcoded state maintaince of select elements.
  if (eval("element.form.btnFormat" + element.Field)) {  
    var elSelect = eval("element.form.btnFormat" + element.Field);
    cmdStatus = element.editor.QueryStatus(5043);
    if (cmdStatus == 1 || cmdStatus == 0) {
      elSelect.disabled = true;
    } else {
      selectOption(elSelect,element.editor.ExecCommand(5011, 0));    
    }
  }
  if (eval("element.form.btnFont" + element.Field)) {  
    var elSelect = eval("element.form.btnFont" + element.Field);  
    cmdStatus = element.editor.QueryStatus(5013);
    if (cmdStatus == 1 || cmdStatus == 0) {
      elSelect.disabled = true;
    } else {
      selectOption(elSelect,element.editor.ExecCommand(5013, 0));    
    }
  }
  if (eval("element.form.btnSize" + element.Field)) {
    var elSelect = eval("element.form.btnSize" + element.Field);    
    cmdStatus = element.editor.QueryStatus(5045);    
    if (cmdStatus == 1 || cmdStatus == 0) {
      elSelect.disabled = true;
    } else {
      selectOption(elSelect,element.editor.ExecCommand(5014, 0));
    }
  }
}

function selectOption(el,opt) {
  el.disabled = false;
  for (var idx=0; idx < el.options.length; idx++) {
    if (el.options[idx].text == opt) {
      el.selectedIndex = idx;
      break;      
    }
  }
}

// this function loads soEditor's controls into arrays so that their states can be managed based on the editor
function registerControl(sName,aControl,cmd,bAllowedInTextEdit) {
  // load the control and suppress the error if the control isnt present
  try {
    aControl[aControl.length] = new control(eval(sName), cmd, bAllowedInTextEdit);
  }catch(e){ }
}

//Create UI button objects used to maintain the toolbars
function control(el,cmd,inText) {
  this.el = el;
  this.cmd = cmd;
  this.inText = inText;  
}

function getBooleanValue(b){
  return (b == "true" || b == "1");
}  

// keyboard trap to handle single spacing
function keyPressed() {
  objDOM = element.editor.DOM;
  oEvent = objDOM.parentWindow.event;
  if (objDOM.selection.type == "Control" || oEvent.keyCode != 13) return;
  var rng = objDOM.selection.createRange();  
  var el = rng.parentElement();
  while (el.tagName != "BODY" && el.tagName != "LI") {
    el = el.parentElement;
  }
  if (oEvent.keyCode == 13 && el.tagName == "LI") {
    return;
  } else if (oEvent.keyCode == 13 && !oEvent.altKey && !oEvent.ctrlKey && !oEvent.shiftKey) {
    rng.pasteHTML("<br>");
    rng.select();
    oEvent.returnValue = false;
  } else if (oEvent.keyCode == 13 && oEvent.shiftKey) {
    rng.pasteHTML("<p>" + rng.htmlText + "</p>");
    rng.select();
    oEvent.returnValue = false;  
  }
}

// keeps a running total of the rough amount of words executed every second
function totalWords() {
  // skip if editor is loading
  if (!element.editor.Busy) {
    var iSumWords = 0;
    var objDOM = element.editor.DOM;
    var rng = objDOM.body.createTextRange();
    rng.collapse(true);
    while(rng.move("word",1)) {
      iSumWords++;
    }
    eval("totalwords" + element.Field + ".innerText = iSumWords + \" word(s)\"");
  }
}

function formSubmitted() {
  if (element.ValidateOnSave) {
    if (element.editor.DOM.body.outerText.length == 0 && element.editor.DOM.body.getElementsByTagName("img").length == 0 && element.editor.DOM.body.getElementsByTagName("table").length == 0) {
      alert(element.ValidationMessage);
      return false;
    }
  }
  updateFormField();
}

// closes image manager if the window is open
function cleanUpWindows() {
  try {
    winIM.close();
  } catch(e){}
}

function mDoubleClick() {
  if (eventCount % 2 == 0) {
    var currEl = element.editor.DOM.selection.createRange();
    if (element.editor.DOM.selection.type == "Control") {
      switch (currEl.item(0).tagName.toLowerCase()) {
        case "img":
          image();
          break;
        case "table":
          insertTable();
          break;     
      }
    }
  }
  eventCount ++;
}

//Open the image manager
function image() {
  var sURLParams = "";
  // check current selection for image
  if(element.editor.DOM.selection.type == "Control"){
     var oIMG = element.editor.DOM.selection.createRange().item(0);
     if (oIMG.tagName.toLowerCase() == "img") {
      // strip the absolute page if baseURL is defined
      var sImgSrc = oIMG.src;
      if (baseURL.length > 0) {
        sImgSrc = execRE(element.BaseURL, "", sImgSrc);
      }
      //Set the url variables
      sURLParams += "&src=" + sImgSrc + "&style=" + oIMG.style.cssText + "&alt=" + oIMG.alt + "&width=" + oIMG.width + "&height=" + oIMG.height + "&hspace=" + oIMG.hspace + "&vspace=" + oIMG.vspace + "&border=" + oIMG.border + "&align=" + oIMG.align
     } 
  } 
  //get correct image files based on platform
  var _imagefile
  switch(element.Platform) {
    case "CF":
      _imagefile = "image.cfm";
      break;
    case "ASP":
      _imagefile = "image.asp";
      break;
    case ".NET":
      _imagefile = "image.aspx";
      break;
  }
  winIM = window.open(element.ScriptPath + _imagefile + "?field=" + element.Field + "&imagepath=" + element.ImagePath + sURLParams, "ImageManager","width=480,height=260,menubar=0,status=0,toolbar=0,resizeable=0");
}

// editor is ready
function contentReady() { 
  if (element.BaseFont != "") {
    element.editor.ExecCommand(5044, 0, element.BaseFont);  
  }
  if (element.BaseFontSize != "") {
    element.editor.ExecCommand(5045, 0, element.BaseFontSize);
  }  
  if (element.BaseFontColor != "") {
    element.editor.ExecCommand(5046, 0, element.BaseFontColor);  
  }
  
  //check to see if the editor should have focus when loaded
  if (!bFocusSent) {
    if (element.InitialFocus.toLowerCase() == "true") {
      moveCursorFront();
      element.editor.focus();
    }
    else if (element.InitialFocus.length && element.InitialFocus.toLowerCase() != "false") {
      try {
        eval("window.document.all." + element.Form + "." + element.InitialFocus + ".focus()");
      } catch (e) {}
    }
    bFocusSent = true;
  }
  
  this.editor.DOM.body.style.fontFamily="";
  this.editor.DOM.body.style.fontSize="";
  if (element.BaseBGColor != "") {
    this.editor.DOM.body.style.backgroundColor = element.BaseBGColor;  
  }
  //set the base url for relative links
  element.editor.BaseURL = element.BaseURL;
    
  //document has finished rendering
  bDocumentComplete = true;
}

// old content ready function
/*
function contentReady() { 
  if (element.BaseFont != "") {
    element.editor.ExecCommand(5044, 0, element.BaseFont);  
  }
  if (element.BaseFontSize != "") {
    element.editor.ExecCommand(5045, 0, element.BaseFontSize);
  }  
  if (element.BaseFontColor != "") {
    element.editor.ExecCommand(5046, 0, element.BaseFontColor);  
  }
  moveCursorFront();
  //check to see if the editor should have focus when loaded
  if (element.InitialFocus.toLowerCase() == "true")
    element.editor.focus();
  this.editor.DOM.body.style.fontFamily="";
  this.editor.DOM.body.style.fontSize="";
  if (element.BaseBGColor != "") {
    this.editor.DOM.body.style.backgroundColor = element.BaseBGColor;  
  }
  //set the base url for relative links
  element.editor.BaseURL = element.BaseURL;  
  element.editor.attachEvent("ondblclick", mDoubleClick);      
}
*/

function insertLink(bAnchor) { //execCmd(5016)
  var aOut = null, oInput = null, aIn = new Array(), elHREF, elImg;
  var currEl = element.editor.DOM.selection.createRange();
  if (element.editor.DOM.selection.type == "Control") {
    if (currEl.item(0).tagName.toLowerCase() == "img") {
      elImg = currEl.item(0);
      elParent = currEl.item(0).parentElement;
      if (elParent.tagName.toLowerCase() == "a") {
        elHREF = elParent;
      }
    } else return;
  } else { 
    elHREF = getHyperLink(currEl.parentElement());
  }
  if(elHREF){
    // parse out the link
		//var oReg= new RegExp("<a href=\"([^\"]*)\".*","i");
    //var result = elHREF.outerHTML.replace(oReg, "$1");
    //Set the input params
    if (elHREF.getAttribute("name").length > 0) {
      aIn["name"] = elHREF.getAttribute("name");
      aIn["class"] = elHREF.className;
      aIn["style"] = elHREF.style.cssText;
    }
    else {
      aIn["edit"] = 1;
      aIn["field"] = element.Field;
      aIn["url"] = elHREF.getAttribute("href",2);
      aIn["name"] = elHREF.name;
      aIn["target"] = elHREF.target;
      aIn["class"] = elHREF.className;
      aIn["style"] = elHREF.style.cssText;
      for ( var i = 0; i < element.editor.DOM.anchors.length; i++) {
        aIn[element.editor.DOM.anchors[i].name] = element.editor.DOM.anchors[i].name;
      }
    }
  } else {
    //defaults
    if (bAnchor)
      aIn["name"] = "";
    else {
      aIn["url"] = "";
      for ( var i = 0; i < element.editor.DOM.anchors.length; i++) {
        aIn[element.editor.DOM.anchors[i].name] = element.editor.DOM.anchors[i].name;
      }
    }   
  }
  if (elHREF && elHREF.getAttribute("name").length > 0)
    aOut = parent.showModalDialog(element.ScriptPath + "anchor.htm",aIn,"dialogWidth:340px; dialogHeight:225px;help:0;status:no;");
  else if (elHREF)
    aOut = parent.showModalDialog(element.ScriptPath + "hyperlink.htm",aIn,"dialogWidth:340px; dialogHeight:295px;help:0;status:no;");
  else
    aOut = (bAnchor == false) ? parent.showModalDialog(element.ScriptPath + "hyperlink.htm",aIn,"dialogWidth:340px; dialogHeight:295px;help:0;status:no;") : parent.showModalDialog(element.ScriptPath + "anchor.htm",aIn,"dialogWidth:340px; dialogHeight:225px;help:0;status:no;");
  if (aOut != null) {  
    //assign the existing link its new properties
    if (elHREF) {
      if (elHREF.getAttribute("name").length) {
        elHREF.name = aOut["name"];
        elHREF.className = aOut["class"];
        elHREF.style.cssText = aOut["style"];
      }
      else {
        elHREF.href = aOut["url"];    
        elHREF.target = aOut["target"];
        elHREF.className = aOut["class"];
        elHREF.style.cssText = aOut["style"];
      }     
    } else {
      //create the link around the image
      if (elImg) {
        if (bAnchor)
          elImg.outerHTML = "<a name=\"" + aOut["name"] + "\" class=\"" + aOut["class"] + "\" style=\"" + aOut["style"] + "\">" + elImg.outerHTML + "</a>";
        else
          elImg.outerHTML = "<a href=\"" + aOut["url"] + "\" target=\"" + aOut["target"] + "\" class=\"" + aOut["class"] + "\" style=\"" + aOut["style"] + "\">" + elImg.outerHTML + "</a>";
      } else {
        //create a new link
        if (bAnchor)
          currEl.pasteHTML("<a name=\"" + aOut["name"] + "\" class=\"" + aOut["class"] + "\" style=\"" + aOut["style"] + "\">" + currEl.htmlText + "</a>");
        else
          currEl.pasteHTML("<a href=\"" + aOut["url"] + "\" target=\"" + aOut["target"] + "\" class=\"" + aOut["class"] + "\" style=\"" + aOut["style"] + "\">" + currEl.htmlText + "</a>"); 
      }
    }
  }
  element.editor.focus();  
}

function loadControls(){
  tbControls = new Array(); // This array holds all the controls of soEditor
  tbControls[0] = new Array(); // This array contains controls who's state is maintained by soEditor
  tbControls[1] = new Array(); // This array contains controls that need to be disabled when in Text mode
  tbControls[2] = new Array(); // This array contains select controls
  registerControl("btnUndo"  + element.Field,tbControls[0],5049,1);
  registerControl("btnRedo"  + element.Field,tbControls[0],5033,1);
  registerControl("btnCut" + element.Field,tbControls[0],5003,1);
  registerControl("btnCopy" + element.Field,tbControls[0],5002,1);
  registerControl("btnPaste" + element.Field,tbControls[0],5032,1);
  registerControl("element.form.btnFormat" + element.Field,tbControls[2],5043,0);
  registerControl("element.form.btnFont" + element.Field,tbControls[2],5044,0);
  registerControl("element.form.btnSize" + element.Field,tbControls[2],5045,0);
  registerControl("element.form.btnLinks" + element.Field,tbControls[2],null,0);
  registerControl("element.form.btnForms" + element.Field,tbControls[2],null,0);  
  registerControl("btnBold" + element.Field,tbControls[0],5000,0);
  registerControl("btnItalic" + element.Field,tbControls[0],5023,0);
  registerControl("btnUnder" + element.Field,tbControls[0],5048,0);
  registerControl("btnSuper" + element.Field,tbControls[1],null,0); //added by don
  registerControl("btnSub" + element.Field,tbControls[1],null,0); //added by don
  registerControl("btnAlign" + element.Field + "[0]",tbControls[0],5025,0);
  registerControl("btnAlign" + element.Field + "[1]",tbControls[0],5024,0);
  registerControl("btnAlign" + element.Field + "[2]",tbControls[0],5026,0);
  registerControl("btnList" + element.Field + "[0]",tbControls[0],5030,0);
  registerControl("btnList" + element.Field + "[1]",tbControls[0],5051,0);
  registerControl("btnUnIndent" + element.Field,tbControls[0],5031,0);
  registerControl("btnIndent" + element.Field,tbControls[0],5018,0);
  registerControl("btnLink" + element.Field,tbControls[0],5016,0);
  registerControl("btnAnchor" + element.Field,tbControls[0],5016,0);
  registerControl("btnUnLink" + element.Field,tbControls[0],5050,0);
  registerControl("btnFgColor" + element.Field,tbControls[0],5046,0);
  registerControl("btnHR" + element.Field,tbControls[1],null,0);
  registerControl("btnBgColor" + element.Field,tbControls[0],5042,0);
  registerControl("btnFontCtrl" + element.Field,tbControls[0],5009,0);
  registerControl("btnImage" + element.Field,tbControls[0],5017,0);
  registerControl("btnBorders" + element.Field,tbControls[1],null,0);
  registerControl("btnTable" + element.Field,tbControls[1],null,0);
  registerControl("btnInsCell" + element.Field,tbControls[0],5019,0);
  registerControl("btnDelCell" + element.Field,tbControls[0],5005,0);
  registerControl("btnInsRow" + element.Field,tbControls[0],5021,0);
  registerControl("btnDelRow" + element.Field,tbControls[0],5007,0);
  registerControl("btnInsColumn" + element.Field,tbControls[0],5020,0);
  registerControl("btnDelColumn" + element.Field,tbControls[0],5006,0);
  registerControl("btnSpltCell" + element.Field,tbControls[0],5047,0);
  registerControl("btnTDProp" + element.Field,tbControls[0],5047,0);
  registerControl("btnMrgCell" + element.Field,tbControls[0],5029,0);
  registerControl("btnDetails" + element.Field,tbControls[1],null,0);
  element.editor.attachEvent("DisplayChanged", contentChanged);
}

// Initialize the editor by adding the DHTML Edit Component and Table object to the document and loading the control arrays
function init(){
  element.PageEdit = getBooleanValue(element.PageEdit);
  element.SingleSpaced = getBooleanValue(element.SingleSpaced);
  element.WordCount = getBooleanValue(element.WordCount);
  element.ValidateOnSave = getBooleanValue(element.ValidateOnSave);  
  var tempHTML = '<object id="' + element.Field + 'control" style="z-index:1;width:' + element.Width + '; height:' + element.Height + ';" CLASSID="clsid:2D360201-FFF5-11D1-8D03-00A0C959BC0A" VIEWASTEXT><param name="AbsoluteDropMode" value="0"><param name="ActivateApplets" value="0">param name="ActivateActiveXControls" value="-1"><param name="ActivateDTCs" value="-1"><param name="ShowDetails" value="0"><param name="ShowBorders" value="0"><param name="Appearance" value="1"><param name="Scrollbars" value="-1"><param name="ScrollbarAppearance" value="1"><param name="SourceCodePreservation" value="-1"><param name="SnapToGrid" value="0"><param name="SnapToGridX" value="50"><param name="SnapToGridY" value="50"><param name="UseDivOnCarriageReturn" VALUE="1"></object><object style="display:none;" ID="oTable' + element.Field + '" CLASSID="clsid:47B0DFC7-B7A3-11D1-ADC5-006008A5848C" viewastext></object>';
  if (! element.innerHTML.length > 0) {
    element.innerHTML = tempHTML;       
    element.editor = eval("window.document.all." + element.Field + "control");
    element.form = eval("window.document." + element.form);  
    // load the controls when the document is loaded
    window.attachEvent("onload", loadControls);
    // set the word counter 
    /*if (element.WordCount) {
      iWordTimer = window.setInterval(totalWords, 1000, "JScript");    
    } else {
      var oTotalWords = eval("totalwords" + element.Field);
      oTotalWords.innerText = "";
    }*/
    // update the hidden form field when for is submitted by external submit button
    element.form.attachEvent("onsubmit", formSubmitted);
    // if image dialog is open, keep focus on it
    window.attachEvent("onfocus", function() {try {winIM.focus();} catch(e){} });  
    element.editor.attachEvent("onfocus", function() {try {winIM.focus();} catch(e){} });  
    // attach to unload event to check for unsaved changes
    // attach event to clean up possible open windows
    window.attachEvent("onunload", cleanUpWindows);
    // add traps for key presses
    if (element.SingleSpaced) {
      element.editor.attachEvent("onkeypress", keyPressed);
    }
    // load the html to be edited
    var elHidden = eval("this.form." + element.Field);
    element.DocumentHTML = elHidden.value;
    // takes care of functions when document is loaded
    element.editor.attachEvent("DocumentComplete", contentReady);  
    element.editor.attachEvent("ondblclick", mDoubleClick);
    element.editor.attachEvent("ShowContextMenu", mCtxMenu);
  }
}

function mCtxMenu() {
  try
  {
    var objDOM = element.editor.DOM;
    var ctx = new ContextMenu(objDOM);
    try { if (eval("btnCut" + element.Field) != null) ctx.addItem("Cut", element.ScriptPath + "icons/cut.gif", "", 5003,false); } catch (e) { }
    try { if (eval("btnCopy" + element.Field) != null) ctx.addItem("Copy", element.ScriptPath + "icons/copy.gif", "", 5002,false); } catch (e) { }
    try { if (eval("btnPaste" + element.Field) != null) ctx.addItem("Paste", element.ScriptPath + "icons/paste.gif", "", 5032,false); } catch (e) { }
    ctx.addSeperator();
    if (objDOM.selection.type != "None") {
      if (objDOM.selection.type == "Control") {
        var _elControl = objDOM.selection.createRange();
        switch (_elControl.item(0).tagName.toLowerCase()) {
          case "img":
            try { if (eval("btnImage" + element.Field) != null) ctx.addItem("Image...", element.ScriptPath + "icons/image.gif", "image()", "", false); ctx.addSeperator(); } catch (e) { }
            if (_elControl.item(0).parentElement.tagName.toLowerCase() == "a")
              ctx.addItem("Hyperlink...", element.ScriptPath + "icons/link.gif", "insertLink(false)","",false);
            break;
            ctx.addSeperator();
          case "table":
            ctx.addItem("Table...", element.ScriptPath + "icons/instable.gif", "insertTable()","", false);
            ctx.addSeperator();
            break;                                  
        }
      }
      else if (objDOM.selection.type == "Text") {
        var _href;
        var _currEl = objDOM.selection.createRange();
        ctx.addItem("Font...", element.ScriptPath + "icons/font.gif", "", 5009, false);
        if (_href = getHyperLink(_currEl.parentElement()))
          ctx.addItem("Hyperlink...", element.ScriptPath + "icons/link.gif", "insertLink(false)","",false);
        else
          ctx.addItem("Insert Hyperlink...", element.ScriptPath + "icons/link.gif", "insertLink(false)","",false);
        ctx.addSeperator();
      }
    }
    //check for table functionality
    var _cmdStatus = element.editor.QueryStatus(5019);
    if (_cmdStatus != 0 && _cmdStatus != 1) {
      try { if (eval("btnInsCell" + element.Field) != null) ctx.addItem("Insert Cell", element.ScriptPath + "icons/inscell.gif", "", 5019, false); } catch(e) { }
      try { if (eval("btnInsRow" + element.Field) != null) ctx.addItem("Insert Row", element.ScriptPath + "icons/insrow.gif", "", 5021, false); } catch(e) { }
      try { if (eval("btnInsColumn" + element.Field) !=null) ctx.addItem("Insert Column", element.ScriptPath + "icons/inscol.gif", "", 5020, false); } catch (e) { }
      ctx.addSeperator();
    }
    ctx.addItem("Design View","","element.SourceEdit=0","",bSourceEdit ? false : true);
    try { if (eval("btnMode" + element.Field) != null) { ctx.addItem("HTML View","","element.SourceEdit=1","",bSourceEdit ? true : false); } } catch (e) { }
    ctx.show(objDOM.parentWindow.event.x, objDOM.parentWindow.event.y, 125, element.editor.DOM.body);
    element.editor.DOM.parentWindow.event.returnValue = false;
  }
  catch(e) { }
}

function ContextMenu(oDOM) {
  try
  {
    var ctxMenu = oDOM.parentWindow.createPopup();
    var iHeight = 4;  
    ctxMenu.document.body.innerHTML = "<table id=\"ctxTable\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"font:8pt Tahoma;cursor:default;\"></table>";
    with (ctxMenu.document.body.style) { border = "1px solid #666666"; overflow = "hidden"; margin = "1px,0px,1px,0px"; backgroundColor = "#F9F8F7"; }
    this.show = function (x, y, w, elRelative) {
      ctxMenu.show(x, y, w, iHeight, elRelative)
    }
    this.addSeperator = function () {
      var _elTR = ctxMenu.document.all.ctxTable.insertRow();
      var _elTD_1 = _elTR.insertCell();
      var _elTD_2 = _elTR.insertCell();
      var _elHR = ctxMenu.document.createElement("<HR/>");
      var _elDIV = ctxMenu.document.createElement("<DIV>");
      iHeight +=15;
      _elTR.style.height="3px";
      with (_elTD_1.style) { height="3px";width="24";backgroundColor="#D8D8D1"; }
      with (_elTD_2.style) { height="3px";padding="0px,0px,0px,3px"; }
      _elHR.style.height=1;
      _elHR.color="#A6A6A6";
      _elHR.noShade=true;
      _elTD_2.appendChild(_elHR);
    }
    // create menu item
    this.addItem = function (sLabel, sImage, onclick, cmd, isActive) {
      //add height for this row to global height var
      var _elTR = ctxMenu.document.all.ctxTable.insertRow();
      _elTR.isActive = (isActive) ? true : false;
      //_elTR.isDisabled = false;
      iHeight += _elTR.height = 22;
      //handle m_click event
      _elTR.onclick = function() {
        if (onclick) {
          eval(onclick);
        }
        else { element.execCmd(cmd); }
        ctxMenu.hide();  
      }
      //handle m_over event
      _elTR.onmouseover = function() {
        //set mouseover effect for the image column
        with (this.firstChild.firstChild.style) { cssText=_sMOver_ImageHolderStyle; }
        //set mouseover effect for the active part
        this.firstChild.firstChild.firstChild.style.cssText = (_elTR.isActive) ? _sMOver_ImageActiveOnStyle : _sMOver_ImageActiveOffStyle;
        //apply dropshadow
        try { if (!_elTR.isActive) this.firstChild.firstChild.firstChild.firstChild.filters.item(0).enabled=true; } catch(e) {}
        //set mouseover effect for the label column
        with (this.lastChild.firstChild.style) { cssText=_sMOver_LabelStyle;}
      }
      //handle m_out event
      _elTR.onmouseout = function() {    
        //set mouseout effect for image column
        with (this.firstChild.firstChild.style) { cssText=_sMOut_ImageHolderStyle; }
        //set mouseout effect for the active part
        this.firstChild.firstChild.firstChild.style.cssText = (_elTR.isActive) ? _sMOut_ImageActiveOnStyle : _sMOut_ImageActiveOffStyle;
        //deactive drop shadow
        try { if (!_elTR.isActive) this.firstChild.firstChild.firstChild.firstChild.filters.item(0).enabled=false; } catch(e) { }
        //set mouseout effect for label column
        with (this.lastChild.firstChild.style) { cssText=_sMOut_LabelStyle; }
      }
      //create the left image cell
      var _sImageTDStyle = "width:24;padding-left:1px;background-color=#D8D8D1;";
      var _sImageHolderStyle = "height:22px;border-left:1px solid #D8D8D1;border-right:0px solid #D8D8D1;border-top:1px solid #D8D8D1;border-bottom:1px solid #D8D8D1;";
      var _sImageActiveOnStyle="height:20px;padding:3px,0px,0px,3px;border:1px solid #0A246A;background-color:#D4D5D8;";
      var _sImageActiveOffStyle="height:20px;padding:3px,0px,0px,3px;border:1px solid #D8D8D1;background-color:#D8D8D1;";
      var _sImageStyle = "position:relative;filter:progid:DXImageTransform.Microsoft.DropShadow('color=#000000,OffX=1,OffY=1,enabled=false');";
      var _sLabelStyle = "height:22;padding:3px,0px,0px,8px;border-left:0px solid #F9F8F7;border-right:1px solid #F9F8F7;border-top:1px solid #F9F8F7;border-bottom:1px solid #F9F8F7;";
      var _sMOver_ImageHolderStyle="height:22px;padding:0px;border-left:1px solid #0A246A;border-right:0px solid #B6BDD2;border-top:1px solid #0A246A;border-bottom:1px solid #0A246A;background-color:#B6BDD2;";
      var _sMOut_ImageHolderStyle="height:22px;padding:0px;border-left:1px solid #D8D8D1;border-right:0px solid #D8D8D1;border-top:1px solid #D8D8D1;border-bottom:1px solid #D8D8D1;background-color:#D8D8D1;";
      var _sMOver_ImageActiveOnStyle="height:20px;padding:3px,0px,0px,3px;border:1px solid #0A246A;background-color:#8592B5;";
      var _sMOut_ImageActiveOnStyle="height:20px;padding:3px,0px,0px,3px;border:1px solid #0A246A;background-color:#D4D5D8;";
      var _sMOver_ImageActiveOffStyle="height:20px;padding:2px,0px,0px,2px;border:1px solid #B6BDD2;background-color:#B6BDD2;";
      var _sMOut_ImageActiveOffStyle="height:20px;padding:3px,0px,0px,3px;border:1px solid #D8D8D1;background-color:#D8D8D1;";
      var _sMOver_LabelStyle="height:22px;padding:3px,0px,0px,8px;border-left:0px solid #B6BDD2;border-right:1px solid #0A246A;border-top:1px solid #0A246A;border-bottom:1px solid #0A246A;background-color:#B6BDD2;"; 
      var _sMOut_LabelStyle="height:22px;padding:3px,0px,0px,8px;border-left:0px solid #F9F8F7;border-right:1px solid #F9F8F7;border-top:1px solid #F9F8F7;border-bottom:1px solid #F9F8F7;background-color:#F9F8F7";
      var _elTD_1 = _elTR.insertCell();
      var _elImageHolder = ctxMenu.document.createElement("<DIV>");
      var _elImageActive = ctxMenu.document.createElement("<DIV>");
      var _elImage = ctxMenu.document.createElement("<IMG>");
      with (_elTD_1) { style.cssText = _sImageTDStyle; appendChild(_elImageHolder); }
      with (_elImageHolder) { style.cssText = _sImageHolderStyle; appendChild(_elImageActive); }
      with (_elImageActive) {  style.cssText = (_elTR.isActive) ? _sImageActiveOnStyle : _sImageActiveOffStyle; if (sImage || _elTR.isActive) { appendChild(_elImage); } }      
      if (sImage || _elTR.isActive) with (_elImage) { src = (sImage) ? sImage : (_elTR.isActive) ? element.ScriptPath + "icons/checkmark.gif" : ""; style.cssText = _sImageStyle; }
      // create the label cell
      var _elTD_2 = _elTR.insertCell();
      var _elLabel = ctxMenu.document.createElement("<DIV>");
      with (_elTD_2) { style.paddingRight = "1px"; appendChild(_elLabel); }
      with (_elLabel) { innerText = sLabel; style.cssText=_sLabelStyle; }
      //check to see if the item should be disabled
      if (cmd) {
        var _iStatus = element.editor.QueryStatus(cmd);
        if (_iStatus == 0 || _iStatus == 1) {
          //item should be disabled
          _elTR.disabled = true;
        }
      }
    }
  }
  catch(e) { }
}
</script>
